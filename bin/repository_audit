#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# shellcheck disable=SC2034
VERSION="1.2.1"
SCRIPT_NAME="repository_audit"

# --- Try env override first, then Homebrew, then local dev path ---
if [[ -n "${REPO_AUDIT_HOME:-}" && -d "$REPO_AUDIT_HOME/lib" ]]; then
  BASE_DIR="$REPO_AUDIT_HOME"
elif command -v brew &>/dev/null; then
  HOMEBREW_PREFIX="$(brew --prefix 2>/dev/null || true)"
  # Try finding our formula's pkgshare path (Homebrew standard)
  if [[ -d "$HOMEBREW_PREFIX/share/repository-audit-cli/lib" ]]; then
    BASE_DIR="$HOMEBREW_PREFIX/share/repository-audit-cli"
  elif [[ -d "$HOMEBREW_PREFIX/opt/repository-audit-cli/share/repository-audit-cli/lib" ]]; then
    BASE_DIR="$HOMEBREW_PREFIX/opt/repository-audit-cli/share/repository-audit-cli"
  fi
fi

# If BASE_DIR wasn't set above, fall back to script's parent/parent (dev)
if [[ -z "${BASE_DIR:-}" ]]; then
  BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
fi

LIB_DIR="${LIB_DIR:-$BASE_DIR/lib}"
if [[ -z "${TPL_DIR:-}" ]]; then
  TPL_DIR="$(cd "$LIB_DIR/.." && pwd)/tpl"
fi

# --- Load shared functions ---
if [[ ! -f "$LIB_DIR/audit_utils.sh" ]]; then
  echo "‚ùå Could not locate audit_utils.sh! (looked in $LIB_DIR)"
  exit 1
fi

# shellcheck source=./lib/audit_utils.sh
source "$LIB_DIR/audit_utils.sh"

# Default values
PARENT=""
CHILD=""
OUTDIR="$(pwd)"
AUDIT_TEMPLATE=""
FORMAT="markdown"
DRYRUN=false
HELP=false
SUMMARY=false

# --- ACTION FLAGS: used to detect if we should run in interactive/wizard mode ---
ACTION_FLAGS=(--parent --child --outdir --format --dryrun --summary)
HAS_ACTION_FLAG="false"
for arg in "$@"; do
  for flag in "${ACTION_FLAGS[@]}"; do
    if [[ "$arg" == "$flag" ]]; then
      HAS_ACTION_FLAG="true"
      break 2
    fi
  done
done

# Handle --version
if [[ "${1:-}" == "--version" ]]; then
  echo "$SCRIPT_NAME v$VERSION"
  exit 0
fi

# Handle --help
if [[ "${1:-}" == "--help" ]]; then
  HELP=true
fi

# If NO action flags (and not asking for --help/--version), run the decision tree
if [[ "$HAS_ACTION_FLAG" == "false" && "$HELP" == "false" && "$#" -eq 0 ]]; then

  # shellcheck source=./lib/decision_tree.sh
  source "$LIB_DIR/decision_tree.sh"

  run_decision_tree
  exit 0
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
  --parent)
    PARENT="$2"
    shift 2
    ;;
  --child)
    CHILD="$2"
    shift 2
    ;;
  --outdir)
    OUTDIR="$2"
    shift 2
    ;;
  --audit-tpl)
    AUDIT_TEMPLATE="$2"
    shift 2
    ;;
  --format)
    FORMAT="$2"
    shift 2
    ;;
  --dryrun)
    DRYRUN=true
    shift
    ;;
  --summary)
    SUMMARY=true
    shift
    ;;
  --version)
    echo "$SCRIPT_NAME v$VERSION"
    exit 0
    ;;
  --help)
    HELP=true
    shift
    ;;
  *)
    echo "‚ùå Unknown option: $1"
    exit 1
    ;;
  esac
done

if [[ "$HELP" == true ]]; then
  cat <<EOF
üìò $SCRIPT_NAME (v$VERSION)

Usage:
  $SCRIPT_NAME --parent <folder> [--outdir <dir>] [--format markdown|csv|json] [--dryrun] [--summary]
  $SCRIPT_NAME --child <repo_path> [--outdir <dir>] [--format markdown|csv|json] [--dryrun] [--summary]

Options:
  --parent     Parent directory to scan for Git repositories
  --child      Single repository path to audit
  --outdir     Output folder (default: current directory)
  --format     Output format: markdown (default), csv, or json
  --dryrun     Simulate only, don‚Äôt create any files
  --summary    Include summary block at the end (markdown only)
  --version    Show version information
  --help       Show this help message

Example:
  $SCRIPT_NAME --parent ../projects --outdir ./reports --format csv
EOF
  exit 0
fi

if [[ -n "$PARENT" && -n "$CHILD" ]]; then
  echo "‚ùå Please provide only one of --parent or --child"
  exit 1
fi
if [[ -z "$PARENT" && -z "$CHILD" ]]; then
  echo "‚ùå Please provide either --parent or --child"
  exit 1
fi

# --- Normalize CHILD and OUTDIR to absolute paths (avoids cd/write conflicts) ---
if [[ -n "$CHILD" ]]; then
  CHILD="$(cd "$(dirname "$CHILD")" && pwd)/$(basename "$CHILD")"
fi

if [[ -n "$OUTDIR" ]]; then
  OUTDIR="$(cd "$OUTDIR" 2>/dev/null && pwd)" || {
    echo "‚ùå Failed to resolve --outdir path: $OUTDIR"
    exit 1
  }
fi

# Optional: Warn if they're the same
# if [[ -n "$CHILD" && "$CHILD" == "$OUTDIR" ]]; then
#   echo "‚ö†Ô∏è  Warning: --child and --outdir point to the same directory. This may cause issues when auditing and writing output."
# fi


# Normalize and validate format, set extension and template
case "${FORMAT,,}" in
markdown | md | default | "")
  FORMAT="markdown"
  EXT="md"
  ;;
csv)
  FORMAT="csv"
  EXT="csv"
  ;;
json)
  FORMAT="json"
  EXT="json"
  ;;
*)
  echo "‚ùå Unknown format: $FORMAT"
  exit 1
  ;;
esac

# Resolve main template
if [[ -n "${AUDIT_TEMPLATE:-}" ]]; then
  if [[ -d "$AUDIT_TEMPLATE" ]]; then
    # Use folder and infer based on format
    TPL_DIR="$(cd "$AUDIT_TEMPLATE" && pwd)"
    TEMPLATE="$TPL_DIR/audit_report_${FORMAT}.tpl"
  elif [[ -f "$AUDIT_TEMPLATE" ]]; then
    # Full path to a specific template
    TEMPLATE="$(cd "$(dirname "$AUDIT_TEMPLATE")" && pwd)/$(basename "$AUDIT_TEMPLATE")"
    TPL_DIR="$(dirname "$TEMPLATE")"
  else
    echo "‚ùå Invalid --audit-tpl path: $AUDIT_TEMPLATE"
    exit 1
  fi
else
  TEMPLATE="$TPL_DIR/audit_report_${FORMAT}.tpl"
fi

# These are format-independent, always from TPL_DIR
HEADER_TEMPLATE="$TPL_DIR/audit_report_header.tpl"
FOOTER_TEMPLATE="$TPL_DIR/audit_report_footer.tpl"

TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
REPORT="${OUTDIR%/}/repos_report_${TIMESTAMP}.${EXT}"

mkdir -p "$OUTDIR"
if [[ ! -d "$OUTDIR" ]]; then
  echo "‚ùå Failed to create or access output directory: '$OUTDIR'"
  exit 1
fi

REPORT="${OUTDIR%/}/repos_report_${TIMESTAMP}.${EXT}"
echo "üìÑ Output will be written to: $REPORT"

# Run audit
if [[ -n "$PARENT" ]]; then
  audit_parent "$PARENT" "$REPORT" "$FORMAT" "$DRYRUN" "$TEMPLATE" "$HEADER_TEMPLATE" "$FOOTER_TEMPLATE"
# audit_parent "$PARENT" "$REPORT" "$FORMAT" "$DRYRUN" "$HEADER_TEMPLATE" "$FOOTER_TEMPLATE"
elif [[ -n "$CHILD" ]]; then
  audit_child "$CHILD" "$REPORT" "$FORMAT" "$DRYRUN" "$TEMPLATE" "$HEADER_TEMPLATE" "$FOOTER_TEMPLATE"
# audit_child "$CHILD" "$REPORT" "$FORMAT" "$DRYRUN" "$HEADER_TEMPLATE" "$FOOTER_TEMPLATE"
fi

if [[ "$SUMMARY" == true && "$FORMAT" == "markdown" ]]; then
  print_summary "$REPORT"
fi

if [[ "$DRYRUN" == false ]]; then
  echo "‚úÖ Report saved to: $REPORT"
else
  echo "üß™ Dry run completed."
fi

echo "‚ÑπÔ∏è  Report location: $REPORT"
